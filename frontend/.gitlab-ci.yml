cache:
  paths:
    - .npm/ # для хранения зависимостей сборки фронтенда

stages:
  - build
  - test
  - release   
  - deploy
  - notify

include:
  - template: Security/SAST.gitlab-ci.yml
  
variables:
  VERSION: 1.0.${CI_PIPELINE_ID}
  TG_URL: 'https://api.telegram.org/${TG_TOKEN}'

build:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  # CI_REGISTRY_USER, CI_REGISTRY_PASSWORD, CI_REGISTRY генерятся Гитлабом, их задавать не надо
  script:
    - echo "test"
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/frontend"
      --dockerfile "${CI_PROJECT_DIR}/frontend/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/sausage-frontend:$CI_COMMIT_SHA"
      --build-arg VERSION=$VERSION
      --cache=true

semgrep-sast:
  stage: test
  needs:
    - build

sonarqube-frontend-sast:
  stage: test
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/frontend/.sonar"
    GIT_DEPTH: "0"
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - frontend/.sonar/cache
  script:
    - cd frontend
    - >
      sonar-scanner -Dsonar.qualitygate.wait=true 
      -Dsonar.projectKey=${SONAR_PROJECT_KEY_FRONT}
      -Dsonar.sources=.
      -Dsonar.host.url=${SONARQUBE_URL} 
      -Dsonar.login=${SONAR_LOGIN_FRONT}
  needs:
    - build

release:
  variables:
    GIT_STRATEGY: none
  image:
    name: gcr.io/go-containerregistry/crane:debug
    entrypoint: [ "" ]
  cache: [ ]
  stage: release
  before_script:
    - crane auth login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - crane tag $CI_REGISTRY_IMAGE/sausage-frontend:$CI_COMMIT_SHA $VERSION
  when: manual

deploy-frontend:
  stage: deploy
  image: docker:24.0.7-alpine3.19
  environment:
    name: production/backend
  before_script:
    - apk add openssh-client bash gettext docker-cli-compose
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - docker context create remote --description "remote ssh" --docker "host=ssh://${DEV_USER}@${DEV_HOST}"
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker --context remote compose down frontend || true
    - docker --context remote compose up frontend -d
  when: manual

telegram-notification-frontend:
  stage: notify
  only:
    variables:
      - $CI_COMMIT_MESSAGE =~ /send notification/
  script:
    - >
      curl --request POST --header "Content-Type: application/json" --data "{\"chat_id\": \"-1002185373712\", \"text\": \"Артем К. Практическая 4 - деплой фронтенда. 
      Ссылка $CI_PROJECT_URL/-/jobs/artifacts/$CI_COMMIT_SHA/download?job=build-frontend-code-job\"}" $TG_URL/sendMessage
  needs:
    - build
