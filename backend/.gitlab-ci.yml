stages:
  - build
  - test
  - release
  - deploy
  - notify

include:
  - template: Security/SAST.gitlab-ci.yml

cache:
  paths:
    - ${CI_PROJECT_DIR}/.m2/repository

variables:
  VERSION: 1.0.${CI_PIPELINE_ID}
  MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository
  JAVA_OPTS: -XX:MaxRAMPercentage=90
  TG_URL: 'https://api.telegram.org/${TG_TOKEN}'

build:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  # переменные CI_REGISTRY_USER, CI_REGISTRY_PASSWORD, CI_REGISTRY генерятся Гитлабом, их задавать не надо
  script:
    - echo "test"
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/backend"
      --dockerfile "${CI_PROJECT_DIR}/backend/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/sausage-backend:$CI_COMMIT_SHA"
      --build-arg VERSION=$VERSION
      --cache=true

semgrep-sast:
  stage: test
  variables:
    SAST_JAVA_VERSION: 11
  needs:
    - build

nodejs-scan-sast:
  rules:
  - when: never

sonarqube-backend-sast:
  stage: test
  needs:
    - build
  image: maven:3.8-openjdk-16
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/backend/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"
    SPRING_FLYWAY_ENABLED: "false"
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - backend/.sonar/cache
  script:
    - cd backend
    - >
      mvn verify sonar:sonar -Dsonar.qualitygate.wait=true 
      -Dsonar.projectKey=${SONAR_PROJECT_KEY_BACK}
      -Dsonar.host.url=${SONARQUBE_URL}
      -Dsonar.login=${SONAR_LOGIN_BACK}
      -Dsonar.projectName=${SONAR_PROJECT_KEY_BACK}
      -Dmaven.test.skip=true
  allow_failure: true

release:
  variables:
    GIT_STRATEGY: none
  image:
    name: gcr.io/go-containerregistry/crane:debug
    entrypoint: [ "" ]
  cache: [ ]
  stage: release
  before_script:
    - crane auth login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - crane tag $CI_REGISTRY_IMAGE/sausage-backend:$CI_COMMIT_SHA $VERSION

deploy-backend:
  stage: deploy
  image: vault:1.11.3
  variables:
    SPRING_CLOUD_VAULT_ENABLED: false

  before_script:
    - apk add openssh-client bash gettext
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
# подставим переменные в скрипт deploy.sh и выполним его на целевом хосте, где развернем сосисочный бэкенд
  script:
    - export VAULT_TOKEN="$(vault write -field=token auth/jwt/login role=sausage-store jwt=$CI_JOB_JWT)"
    - export "VERSION=${VERSION}"
    - export "CI_REGISTRY=${CI_REGISTRY}"
    - export "CI_REGISTRY_USER=${CI_REGISTRY_USER}"
    - export "CI_REGISTRY_PASSWORD=${CI_REGISTRY_PASSWORD}"
    - export "CI_REGISTRY_IMAGE=${CI_REGISTRY_IMAGE}"
    - export "SPRING_DATASOURCE_URL=${SPRING_DATASOURCE_URL}"
    - export "SPRING_DATASOURCE_USERNAME=$(vault kv get -field=spring.datasource.username secret/sausage-store)"
    - export "SPRING_DATASOURCE_PASSWORD=$(vault kv get -field=spring.datasource.password secret/sausage-store)"
    - export "SPRING_DATA_MONGODB_URI=$(vault kv get -field=spring.data.mongodb.uri secret/sausage-store)"
    - export "SPRING_CLOUD_VAULT_TOKEN=$VAULT_TOKEN"
    - envsubst < ./backend/deploy.sh | ssh ${DEV_USER}@${DEV_HOST}

telegram-notification-backend:
  stage: notify
  only:
    variables:
      - $CI_COMMIT_MESSAGE =~ /send notification/
  script:
    - > 
      curl --request POST --header "Content-Type: application/json" --data "{\"chat_id\": \"-1002185373712\", \"text\": \"Артём Кононюк - Практическая 4 - деплой бэкенда. 
      Ссылка $CI_PROJECT_URL/-/jobs/artifacts/$CI_COMMIT_SHA/download?job=build-backend-code-job\"}" $TG_URL/sendMessage
  needs:
    - build
